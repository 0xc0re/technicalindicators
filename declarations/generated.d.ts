// Generated by dts-bundle v0.7.2

/**
 * @example <caption>Example usage .</caption>
 * // returns [2,3,4]
 * sma( { period : 2, values : [1,2,3,4]})
 * 
 * @export
 * @class MInput
 * @extends {IndicatorInput}
 */
export class MAInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf MAInput
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf MAInput
     */
    values: number[];
    /**
     * Creates an instance of MAInput.
     * 
     * @param {number} period
     * @param {number[]} values
     * 
     * @memberOf MAInput
     */
    constructor(period: number, values: number[]);
}
/**
 * 
 * 
 * @export
 * @class SMA
 * @extends {Indicator}
 */
export class SMA extends Indicator {
    /**
     * 
     * 
     * @type {number}
     * @memberOf SMA
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf SMA
     */
    price: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf SMA
     */
    result: number[];
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf SMA
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of SMA.
     * 
     * @param {MAInput} input
     * 
     * @memberOf SMA
     */
    constructor(input: MAInput);
    /**
     * 
     * 
     * @static
     * @type {typeof sma}
     * @memberOf SMA
     */
    static calculate: typeof sma;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf SMA
     */
    nextValue(price: number): number | undefined;
}
/**
 * Calcualtes the simple moving average give period and values 
 * 
 * @example
 * sma({ period : 10, values : [20,30,40,50] })
 * 
 * @export
 * @param {MAInput} input Example : { period : 10, values : [20,30,40,50] }
 * @returns {number[]}
 */
export function sma(input: MAInput): number[];

/**
 * 
 * 
 * @export
 * @class EMA Calculates the Exponential moving average
 * @extends {Indicator}
 */
export class EMA extends Indicator {
    /**
     * 
     * 
     * @type {number}
     * @memberOf EMA
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf EMA
     */
    price: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf EMA
     */
    result: number[];
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf EMA
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of EMA.
     * 
     * @param {MAInput} input
     * 
     * @memberOf EMA
     */
    constructor(input: MAInput);
    /**
     * 
     * 
     * @static
     * @type {typeof ema}
     * @memberOf EMA
     */
    static calculate: typeof ema;
    /**
     * 
     * 
     * @param {number} price
     * @returns {number}
     * 
     * @memberOf EMA
     */
    nextValue(price: number): number;
}
/**
 * 
 * 
 * @export
 * @param {MAInput} input
 * @returns {number[]}
 */
export function ema(input: MAInput): number[];

/**
 * 
 * 
 * @export
 * @class WMA
 * @extends {Indicator}
 */
export class WMA extends Indicator {
    /**
     * 
     * 
     * @type {number}
     * @memberOf WMA
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf WMA
     */
    price: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf WMA
     */
    result: number[];
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf WMA
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of WMA.
     * 
     * @param {MAInput} input
     * 
     * @memberOf WMA
     */
    constructor(input: MAInput);
    /**
     * 
     * 
     * @static
     * @type {typeof wma}
     * @memberOf WMA
     */
    static calculate: typeof wma;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf WMA
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {MAInput} input
 * @returns {number[]}
 */
export function wma(input: MAInput): number[];

/**
 * 
 * 
 * @export
 * @class WEMA
 * @extends {Indicator}
 */
export class WEMA extends Indicator {
    /**
     * 
     * 
     * @type {number}
     * @memberOf WEMA
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf WEMA
     */
    price: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf WEMA
     */
    result: number[];
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf WEMA
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of WEMA.
     * 
     * @param {MAInput} input
     * 
     * @memberOf WEMA
     */
    constructor(input: MAInput);
    /**
     * 
     * 
     * @static
     * @type {typeof wema}
     * @memberOf WEMA
     */
    static calculate: typeof wema;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf WEMA
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {MAInput} input
 * @returns {number[]}
 */
export function wema(input: MAInput): number[];

/**
 * 
 * 
 * @export
 * @class MACDInput
 * @extends {IndicatorInput}
 */
export class MACDInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf MACDInput
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf MACDInput
     */
    values: number[];
    /**
     * 
     * 
     * @type {boolean}
     * @memberOf MACDInput
     */
    SimpleMAOscillator: boolean;
    /**
     * 
     * 
     * @type {boolean}
     * @memberOf MACDInput
     */
    SimpleMASignal: boolean;
    /**
     * 
     * 
     * @type {number}
     * @memberOf MACDInput
     */
    fastPeriod: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf MACDInput
     */
    slowPeriod: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf MACDInput
     */
    signalPeriod: number;
    /**
     * Creates an instance of MACDInput.
     * 
     * @param {number} period
     * @param {number[]} values
     * 
     * @memberOf MACDInput
     */
    constructor(period: number, values: number[]);
}
/**
 * 
 * 
 * @export
 * @class MACDOutput
 */
export class MACDOutput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf MACDOutput
     */
    MACD?: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf MACDOutput
     */
    signal?: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf MACDOutput
     */
    histogram?: number;
}
/**
 * 
 * 
 * @export
 * @class MACD
 * @extends {Indicator}
 */
export class MACD extends Indicator {
    /**
     * 
     * 
     * @type {MACDOutput[]}
     * @memberOf MACD
     */
    result: MACDOutput[];
    /**
     * 
     * 
     * @type {(IterableIterator<MACDOutput | undefined>)}
     * @memberOf MACD
     */
    generator: IterableIterator<MACDOutput | undefined>;
    /**
     * Creates an instance of MACD.
     * 
     * @param {MACDInput} input
     * 
     * @memberOf MACD
     */
    constructor(input: MACDInput);
    /**
     * 
     * 
     * @static
     * @type {typeof macd}
     * @memberOf MACD
     */
    static calculate: typeof macd;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(MACDOutput | undefined)}
     * 
     * @memberOf MACD
     */
    nextValue(price: number): MACDOutput | undefined;
}
/**
 * 
 * 
 * @export
 * @param {MACDInput} input
 * @returns {MACDOutput[]}
 */
export function macd(input: MACDInput): MACDOutput[];

/**
 * 
 * 
 * @export
 * @class RSIInput
 * @extends {IndicatorInput}
 */
export class RSIInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf RSIInput
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf RSIInput
     */
    values: number[];
}
/**
 * 
 * 
 * @export
 * @class RSI
 * @extends {Indicator}
 */
export class RSI extends Indicator {
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf RSI
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of RSI.
     * 
     * @param {RSIInput} input
     * 
     * @memberOf RSI
     */
    constructor(input: RSIInput);
    /**
     * 
     * 
     * @static
     * @type {typeof rsi}
     * @memberOf RSI
     */
    static calculate: typeof rsi;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf RSI
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {RSIInput} input
 * @returns {number[]}
 */
export function rsi(input: RSIInput): number[];

/**
 * 
 * 
 * @export
 * @class BollingerBandsInput
 * @extends {IndicatorInput}
 */
export class BollingerBandsInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf BollingerBandsInput
     */
    period: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf BollingerBandsInput
     */
    stdDev: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf BollingerBandsInput
     */
    values: number[];
}
/**
 * 
 * 
 * @export
 * @class BollingerBandsOutput
 * @extends {IndicatorInput}
 */
export class BollingerBandsOutput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf BollingerBandsOutput
     */
    middle: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf BollingerBandsOutput
     */
    upper: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf BollingerBandsOutput
     */
    lower: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf BollingerBandsOutput
     */
    pb: number;
}
/**
 * 
 * 
 * @export
 * @class BollingerBands
 * @extends {Indicator}
 */
export class BollingerBands extends Indicator {
    /**
     * 
     * 
     * @type {(IterableIterator<BollingerBandsOutput | undefined>)}
     * @memberOf BollingerBands
     */
    generator: IterableIterator<BollingerBandsOutput | undefined>;
    /**
     * Creates an instance of BollingerBands.
     * 
     * @param {BollingerBandsInput} input
     * 
     * @memberOf BollingerBands
     */
    constructor(input: BollingerBandsInput);
    /**
     * 
     * 
     * @static
     * @type {typeof bollingerbands}
     * @memberOf BollingerBands
     */
    static calculate: typeof bollingerbands;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(BollingerBandsOutput | undefined)}
     * 
     * @memberOf BollingerBands
     */
    nextValue(price: number): BollingerBandsOutput | undefined;
}
/**
 * 
 * 
 * @export
 * @param {BollingerBandsInput} input
 * @returns {BollingerBandsOutput[]}
 */
export function bollingerbands(input: BollingerBandsInput): BollingerBandsOutput[];

/**
 * 
 * 
 * @export
 * @class ADXInput
 * @extends {IndicatorInput}
 */
export class ADXInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ADXInput
     */
    high: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ADXInput
     */
    low: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ADXInput
     */
    close: number[];
    /**
     * 
     * 
     * @type {number}
     * @memberOf ADXInput
     */
    period: number;
}
/**
 * 
 * 
 * @export
 * @class ADX
 * @extends {Indicator}
 */
export class ADX extends Indicator {
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf ADX
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of ADX.
     * 
     * @param {ADXInput} input
     * 
     * @memberOf ADX
     */
    constructor(input: ADXInput);
    /**
     * 
     * 
     * @static
     * @type {typeof adx}
     * @memberOf ADX
     */
    static calculate: typeof adx;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf ADX
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {ADXInput} input
 * @returns {number[]}
 */
export function adx(input: ADXInput): number[];

/**
 * 
 * 
 * @export
 * @class ATRInput
 * @extends {IndicatorInput}
 */
export class ATRInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ATRInput
     */
    low: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ATRInput
     */
    high: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ATRInput
     */
    close: number[];
    /**
     * 
     * 
     * @type {number}
     * @memberOf ATRInput
     */
    period: number;
}
/**
 * 
 * 
 * @export
 * @class ATR
 * @extends {Indicator}
 */
export class ATR extends Indicator {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ATR
     */
    result: number[];
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf ATR
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of ATR.
     * 
     * @param {ATRInput} input
     * 
     * @memberOf ATR
     */
    constructor(input: ATRInput);
    /**
     * 
     * 
     * @static
     * @type {typeof atr}
     * @memberOf ATR
     */
    static calculate: typeof atr;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf ATR
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {ATRInput} input
 * @returns {number[]}
 */
export function atr(input: ATRInput): number[];

/**
 * 
 * 
 * @export
 * @class TrueRangeInput
 * @extends {IndicatorInput}
 */
export class TrueRangeInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf TrueRangeInput
     */
    low: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf TrueRangeInput
     */
    high: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf TrueRangeInput
     */
    close: number[];
}
/**
 * 
 * 
 * @export
 * @class TrueRange
 * @extends {Indicator}
 */
export class TrueRange extends Indicator {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf TrueRange
     */
    result: number[];
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf TrueRange
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of TrueRange.
     * 
     * @param {TrueRangeInput} input
     * 
     * @memberOf TrueRange
     */
    constructor(input: TrueRangeInput);
    /**
     * 
     * 
     * @static
     * @type {typeof truerange}
     * @memberOf TrueRange
     */
    static calculate: typeof truerange;
    /**
     * 
     * 
     * @param {CandleData} price
     * @returns {(number | undefined)}
     * 
     * @memberOf TrueRange
     */
    nextValue(price: CandleData): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {TrueRangeInput} input
 * @returns {number[]}
 */
export function truerange(input: TrueRangeInput): number[];

/**
 * 
 * 
 * @export
 * @class ROCInput
 * @extends {IndicatorInput}
 */
export class ROCInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf ROCInput
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ROCInput
     */
    values: number[];
}
/**
 * 
 * 
 * @export
 * @class ROC
 * @extends {Indicator}
 */
export class ROC extends Indicator {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ROC
     */
    result: number[];
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf ROC
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of ROC.
     * 
     * @param {ROCInput} input
     * 
     * @memberOf ROC
     */
    constructor(input: ROCInput);
    /**
     * 
     * 
     * @static
     * @type {typeof roc}
     * @memberOf ROC
     */
    static calculate: typeof roc;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf ROC
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {ROCInput} input
 * @returns {number[]}
 */
export function roc(input: ROCInput): number[];

/**
 * 
 * 
 * @export
 * @class KSTInput
 * @extends {IndicatorInput}
 */
export class KSTInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTInput
     */
    ROCPer1: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTInput
     */
    ROCPer2: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTInput
     */
    ROCPer3: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTInput
     */
    ROCPer4: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTInput
     */
    SMAROCPer1: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTInput
     */
    SMAROCPer2: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTInput
     */
    SMAROCPer3: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTInput
     */
    SMAROCPer4: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTInput
     */
    signalPeriod: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf KSTInput
     */
    values: number[];
}
/**
 * 
 * 
 * @export
 * @class KSTOutput
 */
export class KSTOutput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTOutput
     */
    kst: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf KSTOutput
     */
    signal: number;
}
/**
 * 
 * 
 * @export
 * @class KST
 * @extends {Indicator}
 */
export class KST extends Indicator {
    /**
     * 
     * 
     * @type {KSTOutput[]}
     * @memberOf KST
     */
    result: KSTOutput[];
    /**
     * 
     * 
     * @type {(IterableIterator<KSTOutput | undefined>)}
     * @memberOf KST
     */
    generator: IterableIterator<KSTOutput | undefined>;
    /**
     * Creates an instance of KST.
     * 
     * @param {KSTInput} input
     * 
     * @memberOf KST
     */
    constructor(input: KSTInput);
    /**
     * 
     * 
     * @static
     * @type {typeof kst}
     * @memberOf KST
     */
    static calculate: typeof kst;
    /**
     * 
     * 
     * @param {number} price
     * @returns {KSTOutput}
     * 
     * @memberOf KST
     */
    nextValue(price: number): KSTOutput;
}
/**
 * 
 * 
 * @export
 * @param {KSTInput} input
 * @returns {KSTOutput[]}
 */
export function kst(input: KSTInput): KSTOutput[];

/**
 * 
 * 
 * @export
 * @class StochasticInput
 * @extends {IndicatorInput}
 */
export class StochasticInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf StochasticInput
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf StochasticInput
     */
    low: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf StochasticInput
     */
    high: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf StochasticInput
     */
    close: number[];
    /**
     * 
     * 
     * @type {number}
     * @memberOf StochasticInput
     */
    signalPeriod: number;
}
/**
 * 
 * 
 * @export
 * @class StochasticOutput
 */
export class StochasticOutput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf StochasticOutput
     */
    k: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf StochasticOutput
     */
    d: number;
}
/**
 * 
 * 
 * @export
 * @class Stochastic
 * @extends {Indicator}
 */
export class Stochastic extends Indicator {
    /**
     * 
     * 
     * @type {StochasticOutput[]}
     * @memberOf Stochastic
     */
    result: StochasticOutput[];
    /**
     * 
     * 
     * @type {(IterableIterator<StochasticOutput | undefined>)}
     * @memberOf Stochastic
     */
    generator: IterableIterator<StochasticOutput | undefined>;
    /**
     * Creates an instance of Stochastic.
     * 
     * @param {StochasticInput} input
     * 
     * @memberOf Stochastic
     */
    constructor(input: StochasticInput);
    /**
     * 
     * 
     * @static
     * @type {typeof stochastic}
     * @memberOf Stochastic
     */
    static calculate: typeof stochastic;
    /**
     * 
     * 
     * @param {StochasticInput} input
     * @returns {StochasticOutput}
     * 
     * @memberOf Stochastic
     */
    nextValue(input: StochasticInput): StochasticOutput;
}
/**
 * 
 * 
 * @export
 * @param {StochasticInput} input
 * @returns {StochasticOutput[]}
 */
export function stochastic(input: StochasticInput): StochasticOutput[];

/**
 * 
 * 
 * @export
 * @class WilliamsRInput
 * @extends {IndicatorInput}
 */
export class WilliamsRInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf WilliamsRInput
     */
    low: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf WilliamsRInput
     */
    high: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf WilliamsRInput
     */
    close: number[];
    /**
     * 
     * 
     * @type {number}
     * @memberOf WilliamsRInput
     */
    period: number;
}
/**
 * 
 * 
 * @export
 * @class WilliamsR
 * @extends {Indicator}
 */
export class WilliamsR extends Indicator {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf WilliamsR
     */
    result: number[];
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf WilliamsR
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of WilliamsR.
     * 
     * @param {WilliamsRInput} input
     * 
     * @memberOf WilliamsR
     */
    constructor(input: WilliamsRInput);
    /**
     * 
     * 
     * @static
     * @type {typeof williamsr}
     * @memberOf WilliamsR
     */
    static calculate: typeof williamsr;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf WilliamsR
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {WilliamsRInput} input
 * @returns {number[]}
 */
export function williamsr(input: WilliamsRInput): number[];

/**
 * 
 * 
 * @export
 * @class ADLInput
 * @extends {IndicatorInput}
 */
export class ADLInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ADLInput
     */
    high: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ADLInput
     */
    low: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ADLInput
     */
    close: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf ADLInput
     */
    volume: number[];
}
/**
 * 
 * 
 * @export
 * @class ADL
 * @extends {Indicator}
 */
export class ADL extends Indicator {
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf ADL
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of ADL.
     * 
     * @param {ADLInput} input
     * 
     * @memberOf ADL
     */
    constructor(input: ADLInput);
    /**
     * 
     * 
     * @static
     * @type {typeof adl}
     * @memberOf ADL
     */
    static calculate: typeof adl;
    /**
     * 
     * 
     * @param {CandleData} price
     * @returns {(number | undefined)}
     * 
     * @memberOf ADL
     */
    nextValue(price: CandleData): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {ADLInput} input
 * @returns {number[]}
 */
export function adl(input: ADLInput): number[];

/**
 * 
 * 
 * @export
 * @class OBVInput
 * @extends {IndicatorInput}
 */
export class OBVInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf OBVInput
     */
    close: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf OBVInput
     */
    volume: number[];
}
/**
 * 
 * 
 * @export
 * @class OBV
 * @extends {Indicator}
 */
export class OBV extends Indicator {
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf OBV
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of OBV.
     * 
     * @param {OBVInput} input
     * 
     * @memberOf OBV
     */
    constructor(input: OBVInput);
    /**
     * 
     * 
     * @static
     * @type {typeof obv}
     * @memberOf OBV
     */
    static calculate: typeof obv;
    /**
     * 
     * 
     * @param {CandleData} price
     * @returns {(number | undefined)}
     * 
     * @memberOf OBV
     */
    nextValue(price: CandleData): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {OBVInput} input
 * @returns {number[]}
 */
export function obv(input: OBVInput): number[];

/**
 * 
 * 
 * @export
 * @class TRIXInput
 * @extends {IndicatorInput}
 */
export class TRIXInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf TRIXInput
     */
    values: number[];
    /**
     * 
     * 
     * @type {number}
     * @memberOf TRIXInput
     */
    period: number;
}
/**
 * 
 * 
 * @export
 * @class TRIX
 * @extends {Indicator}
 */
export class TRIX extends Indicator {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf TRIX
     */
    result: number[];
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf TRIX
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of TRIX.
     * 
     * @param {TRIXInput} input
     * 
     * @memberOf TRIX
     */
    constructor(input: TRIXInput);
    /**
     * 
     * 
     * @static
     * @type {typeof trix}
     * @memberOf TRIX
     */
    static calculate: typeof trix;
    /**
     * 
     * 
     * @param {number} price
     * @returns {number}
     * 
     * @memberOf TRIX
     */
    nextValue(price: number): number;
}
/**
 * 
 * 
 * @export
 * @param {TRIXInput} input
 * @returns {number[]}
 */
export function trix(input: TRIXInput): number[];

/**
 * 
 * 
 * @export
 * @class AvgGainInput
 * @extends {IndicatorInput}
 */
export class AvgGainInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf AvgGainInput
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf AvgGainInput
     */
    values: number[];
}
/**
 * 
 * 
 * @export
 * @class AverageGain
 * @extends {Indicator}
 */
export class AverageGain extends Indicator {
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf AverageGain
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of AverageGain.
     * 
     * @param {AvgGainInput} input
     * 
     * @memberOf AverageGain
     */
    constructor(input: AvgGainInput);
    /**
     * 
     * 
     * @static
     * @type {typeof averagegain}
     * @memberOf AverageGain
     */
    static calculate: typeof averagegain;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf AverageGain
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {AvgGainInput} input
 * @returns {number[]}
 */
export function averagegain(input: AvgGainInput): number[];

/**
 * 
 * 
 * @export
 * @class AvgLossInput
 * @extends {IndicatorInput}
 */
export class AvgLossInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf AvgLossInput
     */
    values: number[];
    /**
     * 
     * 
     * @type {number}
     * @memberOf AvgLossInput
     */
    period: number;
}
/**
 * 
 * 
 * @export
 * @class AverageLoss
 * @extends {Indicator}
 */
export class AverageLoss extends Indicator {
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf AverageLoss
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of AverageLoss.
     * 
     * @param {AvgLossInput} input
     * 
     * @memberOf AverageLoss
     */
    constructor(input: AvgLossInput);
    /**
     * 
     * 
     * @static
     * @type {typeof averageloss}
     * @memberOf AverageLoss
     */
    static calculate: typeof averageloss;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf AverageLoss
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {AvgLossInput} input
 * @returns {number[]}
 */
export function averageloss(input: AvgLossInput): number[];

/**
 * 
 * 
 * @export
 * @class SDInput
 * @extends {IndicatorInput}
 */
export class SDInput extends IndicatorInput {
    /**
     * 
     * 
     * @type {number}
     * @memberOf SDInput
     */
    period: number;
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf SDInput
     */
    values: number[];
}
/**
 * 
 * 
 * @export
 * @class SD
 * @extends {Indicator}
 */
export class SD extends Indicator {
    /**
     * 
     * 
     * @type {(IterableIterator<number | undefined>)}
     * @memberOf SD
     */
    generator: IterableIterator<number | undefined>;
    /**
     * Creates an instance of SD.
     * 
     * @param {SDInput} input
     * 
     * @memberOf SD
     */
    constructor(input: SDInput);
    /**
     * 
     * 
     * @static
     * @type {typeof sd}
     * @memberOf SD
     */
    static calculate: typeof sd;
    /**
     * 
     * 
     * @param {number} price
     * @returns {(number | undefined)}
     * 
     * @memberOf SD
     */
    nextValue(price: number): number | undefined;
}
/**
 * 
 * 
 * @export
 * @param {SDInput} input
 * @returns {number[]}
 */
export function sd(input: SDInput): number[];

/**
 * 
 * 
 * @export
 * @class BullishPatterns
 * @extends {CandlestickFinder}
 */
export default class BullishPatterns extends CandlestickFinder {
    /**
     * Creates an instance of BullishPatterns.
     * 
     * 
     * @memberOf BullishPatterns
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BullishPatterns
     */
    hasPattern(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {boolean}
 */
export function bullish(data: StockData): boolean;

/**
 * 
 * 
 * @export
 * @class BearishPatterns
 * @extends {CandlestickFinder}
 */
export default class BearishPatterns extends CandlestickFinder {
    /**
     * Creates an instance of BearishPatterns.
     * 
     * 
     * @memberOf BearishPatterns
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BearishPatterns
     */
    hasPattern(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {boolean}
 */
export function bearish(data: StockData): boolean;

/**
 * 
 * 
 * @export
 * @class AbandonedBaby
 * @extends {CandlestickFinder}
 */
export default class AbandonedBaby extends CandlestickFinder {
    /**
     * Creates an instance of AbandonedBaby.
     * 
     * 
     * @memberOf AbandonedBaby
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf AbandonedBaby
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function abandonedbaby(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class Doji
 * @extends {CandlestickFinder}
 */
export default class Doji extends CandlestickFinder {
    /**
     * Creates an instance of Doji.
     * 
     * 
     * @memberOf Doji
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf Doji
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function doji(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BearishEngulfingPattern
 * @extends {CandlestickFinder}
 */
export default class BearishEngulfingPattern extends CandlestickFinder {
    /**
     * Creates an instance of BearishEngulfingPattern.
     * 
     * 
     * @memberOf BearishEngulfingPattern
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BearishEngulfingPattern
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bearishengulfingpattern(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BullishEngulfingPattern
 * @extends {CandlestickFinder}
 */
export default class BullishEngulfingPattern extends CandlestickFinder {
    /**
     * Creates an instance of BullishEngulfingPattern.
     * 
     * 
     * @memberOf BullishEngulfingPattern
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BullishEngulfingPattern
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bullishengulfingpattern(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class DarkCloudCover
 * @extends {CandlestickFinder}
 */
export default class DarkCloudCover extends CandlestickFinder {
    /**
     * Creates an instance of DarkCloudCover.
     * 
     * 
     * @memberOf DarkCloudCover
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf DarkCloudCover
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function darkcloudcover(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class DownsideTasukiGap
 * @extends {CandlestickFinder}
 */
export default class DownsideTasukiGap extends CandlestickFinder {
    /**
     * Creates an instance of DownsideTasukiGap.
     * 
     * 
     * @memberOf DownsideTasukiGap
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf DownsideTasukiGap
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function downsidetasukigap(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class DragonFlyDoji
 * @extends {CandlestickFinder}
 */
export default class DragonFlyDoji extends CandlestickFinder {
    /**
     * Creates an instance of DragonFlyDoji.
     * 
     * 
     * @memberOf DragonFlyDoji
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf DragonFlyDoji
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function dragonflydoji(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class GraveStoneDoji
 * @extends {CandlestickFinder}
 */
export default class GraveStoneDoji extends CandlestickFinder {
    /**
     * Creates an instance of GraveStoneDoji.
     * 
     * 
     * @memberOf GraveStoneDoji
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf GraveStoneDoji
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function gravestonedoji(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BullishHarami
 * @extends {CandlestickFinder}
 */
export default class BullishHarami extends CandlestickFinder {
    /**
     * Creates an instance of BullishHarami.
     * 
     * 
     * @memberOf BullishHarami
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BullishHarami
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bullishharami(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BearishHarami
 * @extends {CandlestickFinder}
 */
export default class BearishHarami extends CandlestickFinder {
    /**
     * Creates an instance of BearishHarami.
     * 
     * 
     * @memberOf BearishHarami
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BearishHarami
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bearishharami(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BullishHaramiCross
 * @extends {CandlestickFinder}
 */
export default class BullishHaramiCross extends CandlestickFinder {
    /**
     * Creates an instance of BullishHaramiCross.
     * 
     * 
     * @memberOf BullishHaramiCross
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BullishHaramiCross
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bullishharamicross(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BearishHaramiCross
 * @extends {CandlestickFinder}
 */
export default class BearishHaramiCross extends CandlestickFinder {
    /**
     * Creates an instance of BearishHaramiCross.
     * 
     * 
     * @memberOf BearishHaramiCross
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BearishHaramiCross
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bearishharamicross(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class EveningDojiStar
 * @extends {CandlestickFinder}
 */
export default class EveningDojiStar extends CandlestickFinder {
    /**
     * Creates an instance of EveningDojiStar.
     * 
     * 
     * @memberOf EveningDojiStar
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf EveningDojiStar
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function eveningdojistar(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class EveningStar
 * @extends {CandlestickFinder}
 */
export default class EveningStar extends CandlestickFinder {
    /**
     * Creates an instance of EveningStar.
     * 
     * 
     * @memberOf EveningStar
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf EveningStar
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function eveningstar(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class MorningDojiStar
 * @extends {CandlestickFinder}
 */
export default class MorningDojiStar extends CandlestickFinder {
    /**
     * Creates an instance of MorningDojiStar.
     * 
     * 
     * @memberOf MorningDojiStar
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf MorningDojiStar
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function morningdojistar(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class MorningStar
 * @extends {CandlestickFinder}
 */
export default class MorningStar extends CandlestickFinder {
    /**
     * Creates an instance of MorningStar.
     * 
     * 
     * @memberOf MorningStar
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf MorningStar
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function morningstar(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BullishMarubozu
 * @extends {CandlestickFinder}
 */
export default class BullishMarubozu extends CandlestickFinder {
    /**
     * Creates an instance of BullishMarubozu.
     * 
     * 
     * @memberOf BullishMarubozu
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BullishMarubozu
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bullishmarubozu(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BearishMarubozu
 * @extends {CandlestickFinder}
 */
export default class BearishMarubozu extends CandlestickFinder {
    /**
     * Creates an instance of BearishMarubozu.
     * 
     * 
     * @memberOf BearishMarubozu
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BearishMarubozu
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bearishmarubozu(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class PiercingLine
 * @extends {CandlestickFinder}
 */
export default class PiercingLine extends CandlestickFinder {
    /**
     * Creates an instance of PiercingLine.
     * 
     * 
     * @memberOf PiercingLine
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf PiercingLine
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function piercingline(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BullishSpinningTop
 * @extends {CandlestickFinder}
 */
export default class BullishSpinningTop extends CandlestickFinder {
    /**
     * Creates an instance of BullishSpinningTop.
     * 
     * 
     * @memberOf BullishSpinningTop
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BullishSpinningTop
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bullishspinningtop(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class BearishSpinningTop
 * @extends {CandlestickFinder}
 */
export default class BearishSpinningTop extends CandlestickFinder {
    /**
     * Creates an instance of BearishSpinningTop.
     * 
     * 
     * @memberOf BearishSpinningTop
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf BearishSpinningTop
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function bearishspinningtop(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class ThreeBlackCrows
 * @extends {CandlestickFinder}
 */
export default class ThreeBlackCrows extends CandlestickFinder {
    /**
     * Creates an instance of ThreeBlackCrows.
     * 
     * 
     * @memberOf ThreeBlackCrows
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf ThreeBlackCrows
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function threeblackcrows(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class ThreeWhiteSoldiers
 * @extends {CandlestickFinder}
 */
export default class ThreeWhiteSoldiers extends CandlestickFinder {
    /**
     * Creates an instance of ThreeWhiteSoldiers.
     * 
     * 
     * @memberOf ThreeWhiteSoldiers
     */
    constructor();
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf ThreeWhiteSoldiers
     */
    logic(data: StockData): boolean;
}
/**
 * 
 * 
 * @export
 * @param {StockData} data
 * @returns {*}
 */
export function threewhitesoldiers(data: StockData): any;

/**
 * 
 * 
 * @export
 * @class IndicatorInput
 */
export class IndicatorInput {
    /**
     * 
     * 
     * @type {boolean}
     * @memberOf IndicatorInput
     */
    reversedInput?: boolean;
    /**
     * 
     * 
     * 
     * @memberOf IndicatorInput
     */
    format?: (data: number) => number;
}
/**
 * 
 * 
 * @export
 * @class AllInputs
 */
export class AllInputs {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf AllInputs
     */
    values?: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf AllInputs
     */
    open?: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf AllInputs
     */
    high?: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf AllInputs
     */
    low?: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf AllInputs
     */
    close?: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf AllInputs
     */
    volume?: number[];
}
/**
 * 
 * 
 * @export
 * @class Indicator
 */
export class Indicator {
    /**
     * 
     * 
     * @type {any[]}
     * @memberOf Indicator
     */
    result: any[];
    /**
     * 
     * 
     * 
     * @memberOf Indicator
     */
    format: (data: number) => number;
    /**
     * Creates an instance of Indicator.
     * 
     * @param {IndicatorInput} input
     * 
     * @memberOf Indicator
     */
    constructor(input: IndicatorInput);
    /**
     * 
     * 
     * @static
     * @param {*} input
     * 
     * @memberOf Indicator
     */
    static reverseInputs(input: any): void;
    /**
     * 
     * 
     * @returns {any[]}
     * 
     * @memberOf Indicator
     */
    getResult(): any[];
}

/**
 * 
 * 
 * @export
 * @class StockData
 */
export default class StockData {
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf StockData
     */
    open: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf StockData
     */
    high: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf StockData
     */
    low: number[];
    /**
     * 
     * 
     * @type {number[]}
     * @memberOf StockData
     */
    close: number[];
    /**
     * 
     * 
     * @type {boolean}
     * @memberOf StockData
     */
    reversedInput?: boolean;
    /**
     * Creates an instance of StockData.
     * 
     * @param {number[]} open
     * @param {number[]} high
     * @param {number[]} low
     * @param {number[]} close
     * @param {boolean} reversedInput
     * 
     * @memberOf StockData
     */
    constructor(open: number[], high: number[], low: number[], close: number[], reversedInput: boolean);
}
/**
 * 
 * 
 * @export
 * @class CandleData
 */
export class CandleData {
    /**
     * 
     * 
     * @type {number}
     * @memberOf CandleData
     */
    open?: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf CandleData
     */
    high?: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf CandleData
     */
    low?: number;
    /**
     * 
     * 
     * @type {number}
     * @memberOf CandleData
     */
    close?: number;
}

/**
 * 
 * 
 * @export
 * @class CandlestickFinder
 */
export default class CandlestickFinder {
    /**
     * 
     * 
     * @type {number}
     * @memberOf CandlestickFinder
     */
    requiredCount: number;
    /**
     * 
     * 
     * @type {string}
     * @memberOf CandlestickFinder
     */
    name: string;
    /**
     * Creates an instance of CandlestickFinder.
     * 
     * 
     * @memberOf CandlestickFinder
     */
    constructor();
    /**
     * 
     * 
     * @param {number} a
     * @param {number} b
     * @returns {boolean}
     * 
     * @memberOf CandlestickFinder
     */
    approximateEqual(a: number, b: number): boolean;
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {boolean}
     * 
     * @memberOf CandlestickFinder
     */
    logic(data: StockData): boolean;
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {number[]}
     * 
     * @memberOf CandlestickFinder
     */
    getAllPatternIndex(data: StockData): number[];
    /**
     * 
     * 
     * @param {StockData} data
     * @returns {*}
     * 
     * @memberOf CandlestickFinder
     */
    hasPattern(data: StockData): any;
    /**
     * 
     * 
     * @protected
     * @param {StockData} data
     * @returns {StockData}
     * 
     * @memberOf CandlestickFinder
     */
    protected _getLastDataForCandleStick(data: StockData): StockData;
    /**
     * 
     * 
     * @protected
     * @param {StockData} data
     * @returns {StockData[]}
     * 
     * @memberOf CandlestickFinder
     */
    protected _generateDataForCandleStick(data: StockData): StockData[];
}

